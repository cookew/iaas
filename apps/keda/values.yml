certificates:
  autoGenerated: false
  certManager:
    enabled: true
    generateCA: false
    issuer:
      generate: false
      name: iaas-wcooke-me

clusterName: iaas

enableServiceLinks: false

logging:
  operator:
    format: json
  webhooks:
    format: json

metricsServer:
  replicaCount: 2
  revisionHistoryLimit: 0

# Enable if using cilium
networkPolicy:
  enabled: false

operator:
  replicaCount: 2
  revisionHistoryLimit: 0

prometheus:
  metricServer:
    # -- Enable metric server Prometheus metrics expose
    enabled: false
    # -- HTTP port used for exposing metrics server prometheus metrics
    port: 8080
    # -- HTTP port name for exposing metrics server prometheus metrics
    portName: metrics
    # -- App Protocol for service when scraping metrics endpoint
    # appProtocol: http
    serviceMonitor:
      # -- Enables ServiceMonitor creation for the Prometheus Operator
      enabled: false
      # -- JobLabel selects the label from the associated Kubernetes service which will be used as the job label for all metrics. [ServiceMonitor Spec]
      jobLabel: ""
      # -- TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics
      targetLabels: []
      # -- PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics
      podTargetLabels: []
      # -- Name of the service port this endpoint refers to. Mutually exclusive with targetPort
      port: metrics
      # -- Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port
      targetPort: ""
      # -- Interval at which metrics should be scraped If not specified Prometheus’ global scrape interval is used.
      interval: ""
      # -- Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than Interval in which the latter is used
      scrapeTimeout: ""
      # -- DEPRECATED. List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabellings: []
      # -- List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabelings: []
      # -- List of expressions that define custom  metric relabeling rules for metric server ServiceMonitor crd after scrape has happened (prometheus operator). [RelabelConfig Spec]
      metricRelabelings: []
      # --  Additional labels to add for metric server using ServiceMonitor crd (prometheus operator)
      additionalLabels: {}
      # -- HTTP scheme used for scraping. Defaults to `http`
      scheme: http
      # -- TLS configuration for scraping metrics
      tlsConfig: {}
        # caFile: /etc/prom-certs/root-cert.pem
        # certFile: /etc/prom-certs/cert-chain.pem
        # insecureSkipVerify: true
        # keyFile: /etc/prom-certs/key.pem
    podMonitor:
      # -- Enables PodMonitor creation for the Prometheus Operator
      enabled: false
      # -- Scraping interval for metric server using podMonitor crd (prometheus operator)
      interval: ""
      # -- Scraping timeout for metric server using podMonitor crd (prometheus operator)
      scrapeTimeout: ""
      # -- Scraping namespace for metric server using podMonitor crd (prometheus operator)
      namespace: ""
      # -- Additional labels to add for metric server using podMonitor crd (prometheus operator)
      additionalLabels: {}
      # -- List of expressions that define custom relabeling rules for metric server podMonitor crd (prometheus operator)
      relabelings: []
      # -- List of expressions that define custom  metric relabeling rules for metric server PodMonitor crd after scrape has happened (prometheus operator). [RelabelConfig Spec]
      metricRelabelings: []
  operator:
    # -- Enable KEDA Operator prometheus metrics expose
    enabled: false
    # -- Port used for exposing KEDA Operator prometheus metrics
    port: 8080
    # -- App Protocol for service when scraping metrics endpoint
    # appProtocol: http
    serviceMonitor:
      # -- Enables ServiceMonitor creation for the Prometheus Operator
      enabled: false
      # -- JobLabel selects the label from the associated Kubernetes service which will be used as the job label for all metrics. [ServiceMonitor Spec]
      jobLabel: ""
      # -- TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics
      targetLabels: []
      # -- PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics
      podTargetLabels: []
      # -- Name of the service port this endpoint refers to. Mutually exclusive with targetPort
      port: metrics
      # -- Name or number of the target port of the Pod behind the Service,
      # the port must be specified with container port property. Mutually exclusive with port
      targetPort: ""
      # -- Interval at which metrics should be scraped If not specified Prometheus’ global scrape interval is used.
      interval: ""
      # -- Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than Interval in which the latter is used
      scrapeTimeout: ""
      # -- DEPRECATED. List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabellings: []
      # -- List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabelings: []
      # -- List of expressions that define custom  metric relabeling rules for metric server ServiceMonitor crd after scrape has happened (prometheus operator). [RelabelConfig Spec]
      metricRelabelings: []
      # -- Additional labels to add for metric server using ServiceMonitor crd (prometheus operator)
      additionalLabels: {}
      # -- HTTP scheme used for scraping. Defaults to `http`
      scheme: http
      # -- TLS configuration for scraping metrics
      tlsConfig: {}
        # caFile: /etc/prom-certs/root-cert.pem
        # certFile: /etc/prom-certs/cert-chain.pem
        # insecureSkipVerify: true
        # keyFile: /etc/prom-certs/key.pem
    podMonitor:
      # -- Enables PodMonitor creation for the Prometheus Operator
      enabled: false
      # -- Scraping interval for KEDA Operator using podMonitor crd (prometheus operator)
      interval: ""
      # -- Scraping timeout for KEDA Operator using podMonitor crd (prometheus operator)
      scrapeTimeout: ""
      # -- Scraping namespace for KEDA Operator using podMonitor crd (prometheus operator)
      namespace: ""
      # -- Additional labels to add for KEDA Operator using podMonitor crd (prometheus operator)
      additionalLabels: {}
      # --  List of expressions that define custom relabeling rules for KEDA Operator podMonitor crd (prometheus operator)
      relabelings: []
      # -- List of expressions that define custom  metric relabeling rules for metric server PodMonitor crd after scrape has happened (prometheus operator). [RelabelConfig Spec]
      metricRelabelings: []
    prometheusRules:
      # -- Enables PrometheusRules creation for the Prometheus Operator
      enabled: false
      # -- Scraping namespace for KEDA Operator using prometheusRules crd (prometheus operator)
      namespace: ""
      # -- Additional labels to add for KEDA Operator using prometheusRules crd (prometheus operator)
      additionalLabels: {}
      # -- Additional alerts to add for KEDA Operator using prometheusRules crd (prometheus operator)
      alerts:
        []
        # - alert: KedaScalerErrors
        #   annotations:
        #     description: Keda scaledObject {{ $labels.scaledObject }} is experiencing errors with {{ $labels.scaler }} scaler
        #     summary: Keda Scaler {{ $labels.scaler }} Errors
        #   expr: sum by ( scaledObject , scaler) (rate(keda_metrics_adapter_scaler_errors[2m]))  > 0
        #   for: 2m
        #   labels:
  webhooks:
    # -- Enable KEDA admission webhooks prometheus metrics expose
    enabled: false
    # -- Port used for exposing KEDA admission webhooks prometheus metrics
    port: 8080
    # -- App Protocol for service when scraping metrics endpoint
    # appProtocol: http
    serviceMonitor:
      # -- Enables ServiceMonitor creation for the Prometheus webhooks
      enabled: false
      # -- jobLabel selects the label from the associated Kubernetes service which will be used as the job label for all metrics. [ServiceMonitor Spec]
      jobLabel: ""
      # -- TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics
      targetLabels: []
      # -- PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics
      podTargetLabels: []
      # -- Name of the service port this endpoint refers to. Mutually exclusive with targetPort
      port: metrics
      # -- Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port
      targetPort: ""
      # -- Interval at which metrics should be scraped If not specified Prometheus’ global scrape interval is used.
      interval: ""
      # -- Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than Interval in which the latter is used
      scrapeTimeout: ""
      # -- DEPRECATED. List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabellings: []
      # -- List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabelings: []
      # -- List of expressions that define custom  metric relabeling rules for metric server ServiceMonitor crd after scrape has happened (prometheus operator). [RelabelConfig Spec]
      metricRelabelings: []
      # -- Additional labels to add for metric server using ServiceMonitor crd (prometheus operator)
      additionalLabels: {}
      # -- HTTP scheme used for scraping. Defaults to `http`
      scheme: http
      # -- TLS configuration for scraping metrics
      tlsConfig: {}
        # caFile: /etc/prom-certs/root-cert.pem
        # certFile: /etc/prom-certs/cert-chain.pem
        # insecureSkipVerify: true
        # keyFile: /etc/prom-certs/key.pem
    prometheusRules:
      # -- Enables PrometheusRules creation for the Prometheus Operator
      enabled: false
      # -- Scraping namespace for KEDA admission webhooks using prometheusRules crd (prometheus operator)
      namespace: ""
      # -- Additional labels to add for KEDA admission webhooks using prometheusRules crd (prometheus operator)
      additionalLabels: {}
      # -- Additional alerts to add for KEDA admission webhooks using prometheusRules crd (prometheus operator)
      alerts: []

rbac:
  controlPlaneServiceAccountsNamespace: openshift-monitoring

webhooks:
  failurePolicy: Ignore
  replicaCount: 2
  revisionHistoryLimit: 0
