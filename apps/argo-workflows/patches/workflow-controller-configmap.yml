kind: ConfigMap
apiVersion: v1
metadata:
  name: workflow-controller-configmap
data:

  # https://argo-workflows.readthedocs.io/en/latest/configure-artifact-repository/#configure-the-default-artifact-repository
  # https://argo-workflows.readthedocs.io/en/latest/fields/#artifactrepository
  artifactRepository: |
    s3:
      bucket: argo-workflows-artifiacts
      # keyFormat: prefix/in/bucket     #optional
      endpoint: rook-ceph-rgw-ceph-objectstore.rook-ceph-cluster.svc:443
      insecure: true
      accessKeySecret:
        name: argo-workflows-artifiacts
        key: AWS_ACCESS_KEY_ID
      secretKeySecret:
        name: argo-workflows-artifiacts
        key: AWS_SECRET_ACCESS_KEY
      useSDKCreds: true

  # Columns are custom columns that will be exposed in the Workflow List View.
  # (available since Argo v3.5)
  columns: |
    # Adds a column to the Workflow List View
    - # The name of this column, e.g., "Workflow Completed".
      name: Workflow Completed
      # The type of this column, "label" or "annotation".
      type: label
      # The key of the label or annotation, e.g., "workflows.argoproj.io/completed".
      key: workflows.argoproj.io/completed

  # # executor controls how the init and wait container should be customized
  # # (available since Argo v2.3)
  # executor: |
  #   imagePullPolicy: IfNotPresent
  #   resources:
  #     requests:
  #       cpu: 0.1
  #       memory: 64Mi
  #     limits:
  #       cpu: 0.5
  #       memory: 512Mi
  #   # args & env allows command line arguments and environment variables to be appended to the
  #   # executor container and is mainly used for development/debugging purposes.
  #   args:
  #   - --loglevel
  #   - debug
  #   - --gloglevel
  #   - "6"
  #   env:
  #   # ARGO_TRACE enables some tracing information for debugging purposes. Currently it enables
  #   # logging of S3 request/response payloads (including auth headers)
  #   - name: ARGO_TRACE
  #     value: "1"

  links: |
    # Adds a button to the workflow page. E.g. linking to you logging facility.
    - name: Example Workflow Link
      scope: workflow
      url: http://logging-facility?namespace=${metadata.namespace}&workflowName=${metadata.name}&startedAt=${status.startedAt}&finishedAt=${status.finishedAt}
    # Adds a button next to the pod.  E.g. linking to you logging facility but for the pod only.
    - name: Example Pod Link
      scope: pod
      url: http://logging-facility?namespace=${metadata.namespace}&podName=${metadata.name}&startedAt=${status.startedAt}&finishedAt=${status.finishedAt}
    - name: Pod Logs
      scope: pod-logs
      url: http://logging-facility?namespace=${metadata.namespace}&podName=${metadata.name}&startedAt=${status.startedAt}&finishedAt=${status.finishedAt}
    - name: Event Source Logs
      scope: event-source-logs
      url: http://logging-facility?namespace=${metadata.namespace}&podName=${metadata.name}&startedAt=${status.startedAt}&finishedAt=${status.finishedAt}
    - name: Sensor Logs
      scope: sensor-logs
      url: http://logging-facility?namespace=${metadata.namespace}&podName=${metadata.name}&startedAt=${status.startedAt}&finishedAt=${status.finishedAt}
    # Adds a button to the bottom right of every page to link to your organisation help or chat.
    - name: Get help
      scope: chat
      url: http://my-chat
    # Adds a button to the top of workflow view to navigate to customized views.
    - name: Completed Workflows
      scope: workflow-list
      url: http://workflows?label=workflows.argoproj.io/completed=true

  # # Defaults for main containers. These can be overridden by the template.
  # # <= v3.3 only `resources` are supported.
  # # >= v3.4 all fields are supported, including security context.
  # mainContainer: |
  #   imagePullPolicy: IfNotPresent
  #   resources:
  #     requests:
  #       cpu: 0.1
  #       memory: 64Mi
  #     limits:
  #       cpu: 0.5
  #       memory: 512Mi
  #   securityContext:
  #     allowPrivilegeEscalation: false
  #     capabilities:
  #       drop:
  #       - ALL
  #     readOnlyRootFilesystem: true
  #     runAsNonRoot: true
  #     runAsUser: 1000

  # https://argo-workflows.readthedocs.io/en/latest/metrics/#prometheus-scraping
  # https://argo-workflows.readthedocs.io/en/latest/workflow-controller-configmap/#metricsconfig
  metricsConfig: |
    # Secure is a flag that starts the metrics servers using TLS, defaults to true
    secure: false
    # MetricsTTL sets how often custom metrics are cleared from memory. Default is "0", metrics are never cleared. Histogram metrics are never cleared.
    metricsTTL: "10m"
    # Modifiers allows tuning of each of the emitted metrics
    modifiers:
      pod_missing:
        disabled: true
      cronworkflows_triggered_total:
        disabledAttributes:
        - name
      k8s_request_duration:
        histogramBuckets: [ 1.0, 2.0, 10.0 ]

  # # Whether or not to emit events on node completion. These can take a up a lot of space in
  # # k8s (typically etcd) resulting in errors when trying to create new events:
  # # "Unable to create audit event: etcdserver: mvcc: database space exceeded"
  # # This config item allows you to disable this.
  # # (since v2.9)
  # nodeEvents: |
  #   enabled: true

  # enable persistence using postgres
  persistence: |
    connectionPool:
      maxIdleConns: 100
      maxOpenConns: 0
      connMaxLifetime: 0s # 0 means connections don't have a max lifetime
    #  if true node status is only saved to the persistence DB to avoid the 1MB limit in etcd
    nodeStatusOffLoad: true
    # save completed workloads to the workflow archive
    archive: true
    # the number of days to keep archived workflows (the default is forever)
    archiveTTL: 180d
    # skip database migration if needed.
    # skipMigration: true

    # LabelSelector determines the workflow that matches with the matchlabels or matchrequirements, will be archived.
    # https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    archiveLabelSelector:
      matchLabels:
        workflows.argoproj.io/archive-strategy: "always"

    # Optional name of the cluster I'm running in. This must be unique for your cluster.
    clusterName: default
    postgresql:
      host: argo-workflows-pg-cluster-rw
      port: 5432
      database: argo-workflows
      tableName: argo_workflows
      # the database secrets must be in the same namespace of the controller
      userNameSecret:
        name: argo-workflows-pg-cluster-app
        key: username
      passwordSecret:
        name: argo-workflows-pg-cluster-app
        key: password
      ssl: false
      # sslMode must be one of: disable, require, verify-ca, verify-full
      # you can find more information about those ssl options here: https://godoc.org/github.com/lib/pq
      sslMode: require

  # SSO Configuration for the Argo server.
  # You must also start argo server with `--auth-mode sso`.
  # https://argo-workflows.readthedocs.io/en/latest/argo-server-auth-mode/
  sso: |
    # This is the root URL of the OIDC provider (required).
    issuer: https://keycloak.apps.iaas.wcooke.me/realms/IaaS
    # Some OIDC providers have alternate root URLs that can be included. These should be reviewed carefully. (optional)
    # issuerAlias: https://altissuer.root.url
    # This defines how long your login is valid for (in hours). (optional)
    # If omitted, defaults to 10h. Example below is 10 days.
    # sessionExpiry: 240h
    # This is name of the secret and the key in it that contain OIDC client
    # ID issued to the application by the provider (required).
    clientId:
      name: keycloak-client
      key: client-id-key
    # This is name of the secret and the key in it that contain OIDC client
    # secret issued to the application by the provider (required).
    clientSecret:
      name: keycloak-client
      key: client-secret-key
    # This is the redirect URL supplied to the provider (optional). It must
    # be in the form <argo-server-root-url>/oauth2/callback. It must be
    # browser-accessible. If omitted, will be automatically generated.
    #redirectUrl: https://argo-workflows.apps.iaas.wcooke.me/oauth2/callback
    # Additional scopes to request. Typically needed for SSO RBAC. >= v2.12
    scopes:
     - groups
     - email
     - profile
    # RBAC Config. >= v2.12
    rbac:
      enabled: false
    # Skip TLS verify, not recommended in production environments. Useful for testing purposes. >= v3.2.4
    insecureSkipVerify: true

  # synchronization configuration for database locks (semaphores and mutexes)
  # This enables coordination between multiple argo controller instances or across clusters
  # Shares a similar structure with persistence configuration
  synchronization: |
    # Connection pool settings, similar to persistence connectionPool
    connectionPool:
      maxIdleConns: 100
      maxOpenConns: 0
      connMaxLifetime: 0s # 0 means connections don't have a max lifetime

    # Required - sets a unique name for this controller instance
    # Must be different for each controller instance to properly coordinate lock ownership
    controllerName: controller-1

    # Optional - customize the table names for the lock mechanism
    # These table names are created and managed by the controller
    limitTableName: sync_limit           # Stores semaphore limits (default: sync_limit)
    stateTableName: sync_state           # Stores current lock state (default: sync_state)
    controllerTableName: sync_controller # Stores controller heartbeats (default: sync_controller)
    lockTableName: sync_lock             # Stores lock coordination data (default: sync_lock)

    # Optional timing configurations
    pollSeconds: 5                  # How often to check for lock changes (default: 5)
    heartbeatSeconds: 60            # How often to update controller heartbeat (default: 60)
    inactiveControllerSeconds: 300  # When to consider a controller dead (default: 300)

    # Time in seconds to cache semaphore limits to reduce database queries (default: 0)
    # 0 means check the limit on every access
    semaphoreLimitCacheSeconds: 0

    # Skip database migration if needed (default: false)
    # skipMigration: true

    # PostgreSQL database configuration - similar to persistence config
    postgresql:
      host: argo-workflows-pg-cluster-rw
      port: 5432
      database: argo-workflows
      # the database secrets must be in the same namespace as the controller
      userNameSecret:
        name: argo-workflows-pg-cluster-app
        key: username
      passwordSecret:
        name: argo-workflows-pg-cluster-app
        key: password
      ssl: false
      sslMode: require

  # # telemetryConfig controls the path and port for prometheus telemetry. Telemetry is enabled and emitted in the same endpoint
  # # as metrics by default, but can be overridden using this config.
  # telemetryConfig: |
  #   enabled: true
  #   path: /telemetry
  #   port: 8080
  #   secure: true  # Use a self-signed cert for TLS, default false

  # # Whether or not to emit events on workflow status changes. These can take a up a lot of space in
  # # k8s (typically etcd), see nodeEvents above.
  # # This config item allows you to disable this.
  # # (since v3.6)
  # workflowEvents: |
  #   enabled: true
